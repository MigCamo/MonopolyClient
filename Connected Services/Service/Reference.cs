//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UIGameClientTourist.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerSet", Namespace="http://schemas.datacontract.org/2004/07/DataBase")]
    [System.SerializableAttribute()]
    public partial class PlayerSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.FriendRequest[] FriendRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.FriendRequest[] FriendRequest1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string eMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.friendship[] friendshipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.friendship[] friendship1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.FriendRequest[] FriendRequest {
            get {
                return this.FriendRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendRequestField, value) != true)) {
                    this.FriendRequestField = value;
                    this.RaisePropertyChanged("FriendRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.FriendRequest[] FriendRequest1 {
            get {
                return this.FriendRequest1Field;
            }
            set {
                if ((object.ReferenceEquals(this.FriendRequest1Field, value) != true)) {
                    this.FriendRequest1Field = value;
                    this.RaisePropertyChanged("FriendRequest1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eMail {
            get {
                return this.eMailField;
            }
            set {
                if ((object.ReferenceEquals(this.eMailField, value) != true)) {
                    this.eMailField = value;
                    this.RaisePropertyChanged("eMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.friendship[] friendship {
            get {
                return this.friendshipField;
            }
            set {
                if ((object.ReferenceEquals(this.friendshipField, value) != true)) {
                    this.friendshipField = value;
                    this.RaisePropertyChanged("friendship");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.friendship[] friendship1 {
            get {
                return this.friendship1Field;
            }
            set {
                if ((object.ReferenceEquals(this.friendship1Field, value) != true)) {
                    this.friendship1Field = value;
                    this.RaisePropertyChanged("friendship1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequest", Namespace="http://schemas.datacontract.org/2004/07/DataBase")]
    [System.SerializableAttribute()]
    public partial class FriendRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.PlayerSet PlayerSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.PlayerSet PlayerSet1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlayerSet1IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlayerSet2IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDRequest {
            get {
                return this.IDRequestField;
            }
            set {
                if ((this.IDRequestField.Equals(value) != true)) {
                    this.IDRequestField = value;
                    this.RaisePropertyChanged("IDRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.PlayerSet PlayerSet {
            get {
                return this.PlayerSetField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerSetField, value) != true)) {
                    this.PlayerSetField = value;
                    this.RaisePropertyChanged("PlayerSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.PlayerSet PlayerSet1 {
            get {
                return this.PlayerSet1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerSet1Field, value) != true)) {
                    this.PlayerSet1Field = value;
                    this.RaisePropertyChanged("PlayerSet1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlayerSet1ID {
            get {
                return this.PlayerSet1IDField;
            }
            set {
                if ((this.PlayerSet1IDField.Equals(value) != true)) {
                    this.PlayerSet1IDField = value;
                    this.RaisePropertyChanged("PlayerSet1ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlayerSet2ID {
            get {
                return this.PlayerSet2IDField;
            }
            set {
                if ((this.PlayerSet2IDField.Equals(value) != true)) {
                    this.PlayerSet2IDField = value;
                    this.RaisePropertyChanged("PlayerSet2ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="friendship", Namespace="http://schemas.datacontract.org/2004/07/DataBase")]
    [System.SerializableAttribute()]
    public partial class friendship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.PlayerSet PlayerSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.PlayerSet PlayerSet1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> player1_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> player2_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.PlayerSet PlayerSet {
            get {
                return this.PlayerSetField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerSetField, value) != true)) {
                    this.PlayerSetField = value;
                    this.RaisePropertyChanged("PlayerSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.PlayerSet PlayerSet1 {
            get {
                return this.PlayerSet1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerSet1Field, value) != true)) {
                    this.PlayerSet1Field = value;
                    this.RaisePropertyChanged("PlayerSet1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> player1_id {
            get {
                return this.player1_idField;
            }
            set {
                if ((this.player1_idField.Equals(value) != true)) {
                    this.player1_idField = value;
                    this.RaisePropertyChanged("player1_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> player2_id {
            get {
                return this.player2_idField;
            }
            set {
                if ((this.player2_idField.Equals(value) != true)) {
                    this.player2_idField = value;
                    this.RaisePropertyChanged("player2_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberPlayersReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Queue<UIGameClientTourist.Service.Player> PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Player[] PlayersInGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SlotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Game.Game_Situation StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdGame {
            get {
                return this.IdGameField;
            }
            set {
                if ((this.IdGameField.Equals(value) != true)) {
                    this.IdGameField = value;
                    this.RaisePropertyChanged("IdGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberPlayersReady {
            get {
                return this.NumberPlayersReadyField;
            }
            set {
                if ((this.NumberPlayersReadyField.Equals(value) != true)) {
                    this.NumberPlayersReadyField = value;
                    this.RaisePropertyChanged("NumberPlayersReady");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Queue<UIGameClientTourist.Service.Player> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Player[] PlayersInGame {
            get {
                return this.PlayersInGameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersInGameField, value) != true)) {
                    this.PlayersInGameField = value;
                    this.RaisePropertyChanged("PlayersInGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Slot {
            get {
                return this.SlotField;
            }
            set {
                if ((this.SlotField.Equals(value) != true)) {
                    this.SlotField = value;
                    this.RaisePropertyChanged("Slot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Game.Game_Situation Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Game.Game_Situation", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
        public enum Game_Situation : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ByStart = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Ongoing = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Finished = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool JailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MoneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Piece TokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Property[] propertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Jail {
            get {
                return this.JailField;
            }
            set {
                if ((this.JailField.Equals(value) != true)) {
                    this.JailField = value;
                    this.RaisePropertyChanged("Jail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Loser {
            get {
                return this.LoserField;
            }
            set {
                if ((this.LoserField.Equals(value) != true)) {
                    this.LoserField = value;
                    this.RaisePropertyChanged("Loser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Money {
            get {
                return this.MoneyField;
            }
            set {
                if ((this.MoneyField.Equals(value) != true)) {
                    this.MoneyField = value;
                    this.RaisePropertyChanged("Money");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Piece Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Property[] properties {
            get {
                return this.propertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.propertiesField, value) != true)) {
                    this.propertiesField = value;
                    this.RaisePropertyChanged("properties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Piece", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
    [System.SerializableAttribute()]
    public partial class Piece : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagenSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagenSource {
            get {
                return this.ImagenSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagenSourceField, value) != true)) {
                    this.ImagenSourceField = value;
                    this.RaisePropertyChanged("ImagenSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartNumber {
            get {
                return this.PartNumberField;
            }
            set {
                if ((this.PartNumberField.Equals(value) != true)) {
                    this.PartNumberField = value;
                    this.RaisePropertyChanged("PartNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
    [System.SerializableAttribute()]
    public partial class Property : UIGameClientTourist.Service.Square {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BuyingCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberHousesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Player OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PosicitionXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PosicitionYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Property.Property_Situation SituationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TaxesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UIGameClientTourist.Service.Property.Type_Property TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BuyingCost {
            get {
                return this.BuyingCostField;
            }
            set {
                if ((this.BuyingCostField.Equals(value) != true)) {
                    this.BuyingCostField = value;
                    this.RaisePropertyChanged("BuyingCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageSource {
            get {
                return this.ImageSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageSourceField, value) != true)) {
                    this.ImageSourceField = value;
                    this.RaisePropertyChanged("ImageSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberHouses {
            get {
                return this.NumberHousesField;
            }
            set {
                if ((this.NumberHousesField.Equals(value) != true)) {
                    this.NumberHousesField = value;
                    this.RaisePropertyChanged("NumberHouses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Player Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PosicitionX {
            get {
                return this.PosicitionXField;
            }
            set {
                if ((this.PosicitionXField.Equals(value) != true)) {
                    this.PosicitionXField = value;
                    this.RaisePropertyChanged("PosicitionX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PosicitionY {
            get {
                return this.PosicitionYField;
            }
            set {
                if ((this.PosicitionYField.Equals(value) != true)) {
                    this.PosicitionYField = value;
                    this.RaisePropertyChanged("PosicitionY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Property.Property_Situation Situation {
            get {
                return this.SituationField;
            }
            set {
                if ((this.SituationField.Equals(value) != true)) {
                    this.SituationField = value;
                    this.RaisePropertyChanged("Situation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Taxes {
            get {
                return this.TaxesField;
            }
            set {
                if ((this.TaxesField.Equals(value) != true)) {
                    this.TaxesField = value;
                    this.RaisePropertyChanged("Taxes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UIGameClientTourist.Service.Property.Type_Property Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Property.Property_Situation", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
        public enum Property_Situation : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Free = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Bought = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            House = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Hotel = 3,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Property.Type_Property", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
        public enum Type_Property : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Jail = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Service = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Street = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Square", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IGameManager")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UIGameClientTourist.Service.Property))]
    public partial class Square : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int position1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="position")]
        public int position1 {
            get {
                return this.position1Field;
            }
            set {
                if ((this.position1Field.Equals(value) != true)) {
                    this.position1Field = value;
                    this.RaisePropertyChanged("position1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestData", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IDataBase")]
    [System.SerializableAttribute()]
    public partial class FriendRequestData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IDRequest {
            get {
                return this.IDRequestField;
            }
            set {
                if ((this.IDRequestField.Equals(value) != true)) {
                    this.IDRequestField = value;
                    this.RaisePropertyChanged("IDRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendList", Namespace="http://schemas.datacontract.org/2004/07/Contracts.IDataBase")]
    [System.SerializableAttribute()]
    public partial class FriendList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFriendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendName {
            get {
                return this.FriendNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendNameField, value) != true)) {
                    this.FriendNameField = value;
                    this.RaisePropertyChanged("FriendName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFriend {
            get {
                return this.IdFriendField;
            }
            set {
                if ((this.IdFriendField.Equals(value) != true)) {
                    this.IdFriendField = value;
                    this.RaisePropertyChanged("IdFriend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IPlayer")]
    public interface IPlayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayer/RegisterPlayerResponse")]
        int RegisterPlayer(UIGameClientTourist.Service.PlayerSet player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayer/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<int> RegisterPlayerAsync(UIGameClientTourist.Service.PlayerSet player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/PlayerSearch", ReplyAction="http://tempuri.org/IPlayer/PlayerSearchResponse")]
        int PlayerSearch(UIGameClientTourist.Service.PlayerSet player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/PlayerSearch", ReplyAction="http://tempuri.org/IPlayer/PlayerSearchResponse")]
        System.Threading.Tasks.Task<int> PlayerSearchAsync(UIGameClientTourist.Service.PlayerSet player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetPlayerName", ReplyAction="http://tempuri.org/IPlayer/GetPlayerNameResponse")]
        string GetPlayerName(int IdPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetPlayerName", ReplyAction="http://tempuri.org/IPlayer/GetPlayerNameResponse")]
        System.Threading.Tasks.Task<string> GetPlayerNameAsync(int IdPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetGame", ReplyAction="http://tempuri.org/IPlayer/GetGameResponse")]
        UIGameClientTourist.Service.Game GetGame(int Game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetGame", ReplyAction="http://tempuri.org/IPlayer/GetGameResponse")]
        System.Threading.Tasks.Task<UIGameClientTourist.Service.Game> GetGameAsync(int Game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetMyPlayersName", ReplyAction="http://tempuri.org/IPlayer/GetMyPlayersNameResponse")]
        string GetMyPlayersName(int idPlayer, int idGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayer/GetMyPlayersName", ReplyAction="http://tempuri.org/IPlayer/GetMyPlayersNameResponse")]
        System.Threading.Tasks.Task<string> GetMyPlayersNameAsync(int idPlayer, int idGame);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerChannel : UIGameClientTourist.Service.IPlayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerClient : System.ServiceModel.ClientBase<UIGameClientTourist.Service.IPlayer>, UIGameClientTourist.Service.IPlayer {
        
        public PlayerClient() {
        }
        
        public PlayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int RegisterPlayer(UIGameClientTourist.Service.PlayerSet player) {
            return base.Channel.RegisterPlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> RegisterPlayerAsync(UIGameClientTourist.Service.PlayerSet player) {
            return base.Channel.RegisterPlayerAsync(player);
        }
        
        public int PlayerSearch(UIGameClientTourist.Service.PlayerSet player) {
            return base.Channel.PlayerSearch(player);
        }
        
        public System.Threading.Tasks.Task<int> PlayerSearchAsync(UIGameClientTourist.Service.PlayerSet player) {
            return base.Channel.PlayerSearchAsync(player);
        }
        
        public string GetPlayerName(int IdPlayer) {
            return base.Channel.GetPlayerName(IdPlayer);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerNameAsync(int IdPlayer) {
            return base.Channel.GetPlayerNameAsync(IdPlayer);
        }
        
        public UIGameClientTourist.Service.Game GetGame(int Game) {
            return base.Channel.GetGame(Game);
        }
        
        public System.Threading.Tasks.Task<UIGameClientTourist.Service.Game> GetGameAsync(int Game) {
            return base.Channel.GetGameAsync(Game);
        }
        
        public string GetMyPlayersName(int idPlayer, int idGame) {
            return base.Channel.GetMyPlayersName(idPlayer, idGame);
        }
        
        public System.Threading.Tasks.Task<string> GetMyPlayersNameAsync(int idPlayer, int idGame) {
            return base.Channel.GetMyPlayersNameAsync(idPlayer, idGame);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IFriends", CallbackContract=typeof(UIGameClientTourist.Service.IFriendsCallback))]
    public interface IFriends {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriends/SavePlayerSession")]
        void SavePlayerSession(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriends/SavePlayerSession")]
        System.Threading.Tasks.Task SavePlayerSessionAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/MakeFriendRequest", ReplyAction="http://tempuri.org/IFriends/MakeFriendRequestResponse")]
        int MakeFriendRequest(int IDPlayer, string namePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/MakeFriendRequest", ReplyAction="http://tempuri.org/IFriends/MakeFriendRequestResponse")]
        System.Threading.Tasks.Task<int> MakeFriendRequestAsync(int IDPlayer, string namePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriends/AcceptFriendRequestResponse")]
        int AcceptFriendRequest(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriends/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/RejectFriendRequest", ReplyAction="http://tempuri.org/IFriends/RejectFriendRequestResponse")]
        int RejectFriendRequest(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/RejectFriendRequest", ReplyAction="http://tempuri.org/IFriends/RejectFriendRequestResponse")]
        System.Threading.Tasks.Task<int> RejectFriendRequestAsync(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriends/UpdatePlayerSession")]
        void UpdatePlayerSession(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriends/UpdatePlayerSession")]
        System.Threading.Tasks.Task UpdatePlayerSessionAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/UpdateFriendRequest", ReplyAction="http://tempuri.org/IFriends/UpdateFriendRequestResponse")]
        void UpdateFriendRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriends/UpdateFriendDisplay", ReplyAction="http://tempuri.org/IFriends/UpdateFriendDisplayResponse")]
        void UpdateFriendDisplay();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsChannel : UIGameClientTourist.Service.IFriends, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsClient : System.ServiceModel.DuplexClientBase<UIGameClientTourist.Service.IFriends>, UIGameClientTourist.Service.IFriends {
        
        public FriendsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SavePlayerSession(int idPlayer) {
            base.Channel.SavePlayerSession(idPlayer);
        }
        
        public System.Threading.Tasks.Task SavePlayerSessionAsync(int idPlayer) {
            return base.Channel.SavePlayerSessionAsync(idPlayer);
        }
        
        public int MakeFriendRequest(int IDPlayer, string namePlayer) {
            return base.Channel.MakeFriendRequest(IDPlayer, namePlayer);
        }
        
        public System.Threading.Tasks.Task<int> MakeFriendRequestAsync(int IDPlayer, string namePlayer) {
            return base.Channel.MakeFriendRequestAsync(IDPlayer, namePlayer);
        }
        
        public int AcceptFriendRequest(int IdRequest) {
            return base.Channel.AcceptFriendRequest(IdRequest);
        }
        
        public System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(int IdRequest) {
            return base.Channel.AcceptFriendRequestAsync(IdRequest);
        }
        
        public int RejectFriendRequest(int IdRequest) {
            return base.Channel.RejectFriendRequest(IdRequest);
        }
        
        public System.Threading.Tasks.Task<int> RejectFriendRequestAsync(int IdRequest) {
            return base.Channel.RejectFriendRequestAsync(IdRequest);
        }
        
        public void UpdatePlayerSession(int idPlayer) {
            base.Channel.UpdatePlayerSession(idPlayer);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerSessionAsync(int idPlayer) {
            return base.Channel.UpdatePlayerSessionAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IGameManager", CallbackContract=typeof(UIGameClientTourist.Service.IGameManagerCallback))]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddGame", ReplyAction="http://tempuri.org/IGameManager/AddGameResponse")]
        void AddGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddGame", ReplyAction="http://tempuri.org/IGameManager/AddGameResponse")]
        System.Threading.Tasks.Task AddGameAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddPlayerToGame", ReplyAction="http://tempuri.org/IGameManager/AddPlayerToGameResponse")]
        void AddPlayerToGame(int game, UIGameClientTourist.Service.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddPlayerToGame", ReplyAction="http://tempuri.org/IGameManager/AddPlayerToGameResponse")]
        System.Threading.Tasks.Task AddPlayerToGameAsync(int game, UIGameClientTourist.Service.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddGuestToGame", ReplyAction="http://tempuri.org/IGameManager/AddGuestToGameResponse")]
        void AddGuestToGame(int idGame, int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddGuestToGame", ReplyAction="http://tempuri.org/IGameManager/AddGuestToGameResponse")]
        System.Threading.Tasks.Task AddGuestToGameAsync(int idGame, int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UpdatePlayers")]
        void UpdatePlayers(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UpdatePlayers")]
        System.Threading.Tasks.Task UpdatePlayersAsync(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendMessage")]
        void SendMessage(int idGame, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int idGame, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/StartGame")]
        void StartGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeGame")]
        void InitializeGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeGame")]
        System.Threading.Tasks.Task InitializeGameAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UpdatePlayerGame")]
        void UpdatePlayerGame(UIGameClientTourist.Service.Game game, int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UpdatePlayerGame")]
        System.Threading.Tasks.Task UpdatePlayerGameAsync(UIGameClientTourist.Service.Game game, int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SelectedPiece")]
        void SelectedPiece(UIGameClientTourist.Service.Game game, string piece);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SelectedPiece")]
        System.Threading.Tasks.Task SelectedPieceAsync(UIGameClientTourist.Service.Game game, string piece);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UnSelectedPiece")]
        void UnSelectedPiece(UIGameClientTourist.Service.Game game, string piece);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UnSelectedPiece")]
        System.Threading.Tasks.Task UnSelectedPieceAsync(UIGameClientTourist.Service.Game game, string piece);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/CheckReadyToStartGame")]
        void CheckReadyToStartGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/CheckReadyToStartGame")]
        System.Threading.Tasks.Task CheckReadyToStartGameAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UnCheckReadyToStartGame")]
        void UnCheckReadyToStartGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UnCheckReadyToStartGame")]
        System.Threading.Tasks.Task UnCheckReadyToStartGameAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InactivateBeginGameControls")]
        void InactivateBeginGameControls(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InactivateBeginGameControls")]
        System.Threading.Tasks.Task InactivateBeginGameControlsAsync(int idGame);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/AddVisualPlayers", ReplyAction="http://tempuri.org/IGameManager/AddVisualPlayersResponse")]
        void AddVisualPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/UpdateGame", ReplyAction="http://tempuri.org/IGameManager/UpdateGameResponse")]
        int UpdateGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetMessage", ReplyAction="http://tempuri.org/IGameManager/GetMessageResponse")]
        void GetMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/MoveToGame", ReplyAction="http://tempuri.org/IGameManager/MoveToGameResponse")]
        void MoveToGame(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/PreparePieces", ReplyAction="http://tempuri.org/IGameManager/PreparePiecesResponse")]
        void PreparePieces(UIGameClientTourist.Service.Game game, UIGameClientTourist.Service.Player[] playersInGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/UptdatePiecePlayer", ReplyAction="http://tempuri.org/IGameManager/UptdatePiecePlayerResponse")]
        UIGameClientTourist.Service.Piece UptdatePiecePlayer(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/BlockPiece", ReplyAction="http://tempuri.org/IGameManager/BlockPieceResponse")]
        void BlockPiece(string piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/UnblockPiece", ReplyAction="http://tempuri.org/IGameManager/UnblockPieceResponse")]
        void UnblockPiece(string piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/EnableStartGameButton", ReplyAction="http://tempuri.org/IGameManager/EnableStartGameButtonResponse")]
        void EnableStartGameButton();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/DisableStartGameButton", ReplyAction="http://tempuri.org/IGameManager/DisableStartGameButtonResponse")]
        void DisableStartGameButton();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : UIGameClientTourist.Service.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.DuplexClientBase<UIGameClientTourist.Service.IGameManager>, UIGameClientTourist.Service.IGameManager {
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddGame(UIGameClientTourist.Service.Game game) {
            base.Channel.AddGame(game);
        }
        
        public System.Threading.Tasks.Task AddGameAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.AddGameAsync(game);
        }
        
        public void AddPlayerToGame(int game, UIGameClientTourist.Service.Player player) {
            base.Channel.AddPlayerToGame(game, player);
        }
        
        public System.Threading.Tasks.Task AddPlayerToGameAsync(int game, UIGameClientTourist.Service.Player player) {
            return base.Channel.AddPlayerToGameAsync(game, player);
        }
        
        public void AddGuestToGame(int idGame, int idPlayer) {
            base.Channel.AddGuestToGame(idGame, idPlayer);
        }
        
        public System.Threading.Tasks.Task AddGuestToGameAsync(int idGame, int idPlayer) {
            return base.Channel.AddGuestToGameAsync(idGame, idPlayer);
        }
        
        public void UpdatePlayers(int idGame) {
            base.Channel.UpdatePlayers(idGame);
        }
        
        public System.Threading.Tasks.Task UpdatePlayersAsync(int idGame) {
            return base.Channel.UpdatePlayersAsync(idGame);
        }
        
        public void SendMessage(int idGame, string message) {
            base.Channel.SendMessage(idGame, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int idGame, string message) {
            return base.Channel.SendMessageAsync(idGame, message);
        }
        
        public void StartGame(UIGameClientTourist.Service.Game game) {
            base.Channel.StartGame(game);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.StartGameAsync(game);
        }
        
        public void InitializeGame(UIGameClientTourist.Service.Game game) {
            base.Channel.InitializeGame(game);
        }
        
        public System.Threading.Tasks.Task InitializeGameAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.InitializeGameAsync(game);
        }
        
        public void UpdatePlayerGame(UIGameClientTourist.Service.Game game, int idPlayer) {
            base.Channel.UpdatePlayerGame(game, idPlayer);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerGameAsync(UIGameClientTourist.Service.Game game, int idPlayer) {
            return base.Channel.UpdatePlayerGameAsync(game, idPlayer);
        }
        
        public void SelectedPiece(UIGameClientTourist.Service.Game game, string piece) {
            base.Channel.SelectedPiece(game, piece);
        }
        
        public System.Threading.Tasks.Task SelectedPieceAsync(UIGameClientTourist.Service.Game game, string piece) {
            return base.Channel.SelectedPieceAsync(game, piece);
        }
        
        public void UnSelectedPiece(UIGameClientTourist.Service.Game game, string piece) {
            base.Channel.UnSelectedPiece(game, piece);
        }
        
        public System.Threading.Tasks.Task UnSelectedPieceAsync(UIGameClientTourist.Service.Game game, string piece) {
            return base.Channel.UnSelectedPieceAsync(game, piece);
        }
        
        public void CheckReadyToStartGame(UIGameClientTourist.Service.Game game) {
            base.Channel.CheckReadyToStartGame(game);
        }
        
        public System.Threading.Tasks.Task CheckReadyToStartGameAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.CheckReadyToStartGameAsync(game);
        }
        
        public void UnCheckReadyToStartGame(UIGameClientTourist.Service.Game game) {
            base.Channel.UnCheckReadyToStartGame(game);
        }
        
        public System.Threading.Tasks.Task UnCheckReadyToStartGameAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.UnCheckReadyToStartGameAsync(game);
        }
        
        public void InactivateBeginGameControls(int idGame) {
            base.Channel.InactivateBeginGameControls(idGame);
        }
        
        public System.Threading.Tasks.Task InactivateBeginGameControlsAsync(int idGame) {
            return base.Channel.InactivateBeginGameControlsAsync(idGame);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IGameLogicManager", CallbackContract=typeof(UIGameClientTourist.Service.IGameLogicManagerCallback))]
    public interface IGameLogicManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/PlayTurn")]
        void PlayTurn(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/PlayTurn")]
        System.Threading.Tasks.Task PlayTurnAsync(UIGameClientTourist.Service.Game game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/UpdatePlayerService")]
        void UpdatePlayerService(int idPlayer, int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/UpdatePlayerService")]
        System.Threading.Tasks.Task UpdatePlayerServiceAsync(int idPlayer, int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/PurchaseProperty")]
        void PurchaseProperty(UIGameClientTourist.Service.Property property, UIGameClientTourist.Service.Player player, int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/PurchaseProperty")]
        System.Threading.Tasks.Task PurchasePropertyAsync(UIGameClientTourist.Service.Property property, UIGameClientTourist.Service.Player player, int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/StartAuction")]
        void StartAuction(int idGame, UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/StartAuction")]
        System.Threading.Tasks.Task StartAuctionAsync(int idGame, UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/MakeBid")]
        void MakeBid(int idGame, int IdPlayer, int Bid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/MakeBid")]
        System.Threading.Tasks.Task MakeBidAsync(int idGame, int IdPlayer, int Bid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/StopAuction")]
        void StopAuction(int idGame, int winner, int winnerBid, UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/StopAuction")]
        System.Threading.Tasks.Task StopAuctionAsync(int idGame, int winner, int winnerBid, UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/UpdateQueu")]
        void UpdateQueu(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/UpdateQueu")]
        System.Threading.Tasks.Task UpdateQueuAsync(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/GetActionCard")]
        void GetActionCard(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/GetActionCard")]
        System.Threading.Tasks.Task GetActionCardAsync(int idGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/MovePlayer")]
        void MovePlayer(int idGame, int spaces);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameLogicManager/MovePlayer")]
        System.Threading.Tasks.Task MovePlayerAsync(int idGame, int spaces);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameLogicManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/PlayDie", ReplyAction="http://tempuri.org/IGameLogicManager/PlayDieResponse")]
        void PlayDie(int firstDieValue, int SecondDieValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/MovePlayerPieceOnBoard", ReplyAction="http://tempuri.org/IGameLogicManager/MovePlayerPieceOnBoardResponse")]
        void MovePlayerPieceOnBoard(UIGameClientTourist.Service.Player player, UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/ShowCard", ReplyAction="http://tempuri.org/IGameLogicManager/ShowCardResponse")]
        void ShowCard(UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/OpenAuctionWindow", ReplyAction="http://tempuri.org/IGameLogicManager/OpenAuctionWindowResponse")]
        void OpenAuctionWindow(UIGameClientTourist.Service.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/UpdateBids", ReplyAction="http://tempuri.org/IGameLogicManager/UpdateBidsResponse")]
        void UpdateBids(int IdPlayer, int Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/EndAuction", ReplyAction="http://tempuri.org/IGameLogicManager/EndAuctionResponse")]
        void EndAuction(UIGameClientTourist.Service.Property property, int winner, int winnerBid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/UpdateTurns", ReplyAction="http://tempuri.org/IGameLogicManager/UpdateTurnsResponse")]
        void UpdateTurns(System.Collections.Generic.Queue<UIGameClientTourist.Service.Player> turns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/LoadFriends", ReplyAction="http://tempuri.org/IGameLogicManager/LoadFriendsResponse")]
        void LoadFriends(System.Collections.Generic.Queue<UIGameClientTourist.Service.Player> friends);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/ShowEvent", ReplyAction="http://tempuri.org/IGameLogicManager/ShowEventResponse")]
        void ShowEvent(int action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/GoToJail", ReplyAction="http://tempuri.org/IGameLogicManager/GoToJailResponse")]
        void GoToJail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/PayTaxes", ReplyAction="http://tempuri.org/IGameLogicManager/PayTaxesResponse")]
        void PayTaxes(int taxes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameLogicManager/GetPay", ReplyAction="http://tempuri.org/IGameLogicManager/GetPayResponse")]
        void GetPay(int money);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameLogicManagerChannel : UIGameClientTourist.Service.IGameLogicManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameLogicManagerClient : System.ServiceModel.DuplexClientBase<UIGameClientTourist.Service.IGameLogicManager>, UIGameClientTourist.Service.IGameLogicManager {
        
        public GameLogicManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameLogicManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameLogicManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameLogicManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameLogicManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void PlayTurn(UIGameClientTourist.Service.Game game) {
            base.Channel.PlayTurn(game);
        }
        
        public System.Threading.Tasks.Task PlayTurnAsync(UIGameClientTourist.Service.Game game) {
            return base.Channel.PlayTurnAsync(game);
        }
        
        public void UpdatePlayerService(int idPlayer, int idGame) {
            base.Channel.UpdatePlayerService(idPlayer, idGame);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerServiceAsync(int idPlayer, int idGame) {
            return base.Channel.UpdatePlayerServiceAsync(idPlayer, idGame);
        }
        
        public void PurchaseProperty(UIGameClientTourist.Service.Property property, UIGameClientTourist.Service.Player player, int idGame) {
            base.Channel.PurchaseProperty(property, player, idGame);
        }
        
        public System.Threading.Tasks.Task PurchasePropertyAsync(UIGameClientTourist.Service.Property property, UIGameClientTourist.Service.Player player, int idGame) {
            return base.Channel.PurchasePropertyAsync(property, player, idGame);
        }
        
        public void StartAuction(int idGame, UIGameClientTourist.Service.Property property) {
            base.Channel.StartAuction(idGame, property);
        }
        
        public System.Threading.Tasks.Task StartAuctionAsync(int idGame, UIGameClientTourist.Service.Property property) {
            return base.Channel.StartAuctionAsync(idGame, property);
        }
        
        public void MakeBid(int idGame, int IdPlayer, int Bid) {
            base.Channel.MakeBid(idGame, IdPlayer, Bid);
        }
        
        public System.Threading.Tasks.Task MakeBidAsync(int idGame, int IdPlayer, int Bid) {
            return base.Channel.MakeBidAsync(idGame, IdPlayer, Bid);
        }
        
        public void StopAuction(int idGame, int winner, int winnerBid, UIGameClientTourist.Service.Property property) {
            base.Channel.StopAuction(idGame, winner, winnerBid, property);
        }
        
        public System.Threading.Tasks.Task StopAuctionAsync(int idGame, int winner, int winnerBid, UIGameClientTourist.Service.Property property) {
            return base.Channel.StopAuctionAsync(idGame, winner, winnerBid, property);
        }
        
        public void UpdateQueu(int idGame) {
            base.Channel.UpdateQueu(idGame);
        }
        
        public System.Threading.Tasks.Task UpdateQueuAsync(int idGame) {
            return base.Channel.UpdateQueuAsync(idGame);
        }
        
        public void GetActionCard(int idGame) {
            base.Channel.GetActionCard(idGame);
        }
        
        public System.Threading.Tasks.Task GetActionCardAsync(int idGame) {
            return base.Channel.GetActionCardAsync(idGame);
        }
        
        public void MovePlayer(int idGame, int spaces) {
            base.Channel.MovePlayer(idGame, spaces);
        }
        
        public System.Threading.Tasks.Task MovePlayerAsync(int idGame, int spaces) {
            return base.Channel.MovePlayerAsync(idGame, spaces);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IFriendList")]
    public interface IFriendList {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendList/GetFriendRequestsResponse")]
        UIGameClientTourist.Service.FriendRequestData[] GetFriendRequests(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendList/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<UIGameClientTourist.Service.FriendRequestData[]> GetFriendRequestsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriends", ReplyAction="http://tempuri.org/IFriendList/GetFriendsResponse")]
        UIGameClientTourist.Service.FriendList[] GetFriends(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriends", ReplyAction="http://tempuri.org/IFriendList/GetFriendsResponse")]
        System.Threading.Tasks.Task<UIGameClientTourist.Service.FriendList[]> GetFriendsAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListChannel : UIGameClientTourist.Service.IFriendList, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendListClient : System.ServiceModel.ClientBase<UIGameClientTourist.Service.IFriendList>, UIGameClientTourist.Service.IFriendList {
        
        public FriendListClient() {
        }
        
        public FriendListClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendListClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UIGameClientTourist.Service.FriendRequestData[] GetFriendRequests(int idPlayer) {
            return base.Channel.GetFriendRequests(idPlayer);
        }
        
        public System.Threading.Tasks.Task<UIGameClientTourist.Service.FriendRequestData[]> GetFriendRequestsAsync(int idPlayer) {
            return base.Channel.GetFriendRequestsAsync(idPlayer);
        }
        
        public UIGameClientTourist.Service.FriendList[] GetFriends(int idPlayer) {
            return base.Channel.GetFriends(idPlayer);
        }
        
        public System.Threading.Tasks.Task<UIGameClientTourist.Service.FriendList[]> GetFriendsAsync(int idPlayer) {
            return base.Channel.GetFriendsAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IPlayAsGuestManager")]
    public interface IPlayAsGuestManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/IsGameFull", ReplyAction="http://tempuri.org/IPlayAsGuestManager/IsGameFullResponse")]
        int IsGameFull(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/IsGameFull", ReplyAction="http://tempuri.org/IPlayAsGuestManager/IsGameFullResponse")]
        System.Threading.Tasks.Task<int> IsGameFullAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/SearchGameByCode", ReplyAction="http://tempuri.org/IPlayAsGuestManager/SearchGameByCodeResponse")]
        int SearchGameByCode(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/SearchGameByCode", ReplyAction="http://tempuri.org/IPlayAsGuestManager/SearchGameByCodeResponse")]
        System.Threading.Tasks.Task<int> SearchGameByCodeAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/IsGameOngoing", ReplyAction="http://tempuri.org/IPlayAsGuestManager/IsGameOngoingResponse")]
        int IsGameOngoing(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayAsGuestManager/IsGameOngoing", ReplyAction="http://tempuri.org/IPlayAsGuestManager/IsGameOngoingResponse")]
        System.Threading.Tasks.Task<int> IsGameOngoingAsync(int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayAsGuestManagerChannel : UIGameClientTourist.Service.IPlayAsGuestManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayAsGuestManagerClient : System.ServiceModel.ClientBase<UIGameClientTourist.Service.IPlayAsGuestManager>, UIGameClientTourist.Service.IPlayAsGuestManager {
        
        public PlayAsGuestManagerClient() {
        }
        
        public PlayAsGuestManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayAsGuestManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayAsGuestManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayAsGuestManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IsGameFull(int code) {
            return base.Channel.IsGameFull(code);
        }
        
        public System.Threading.Tasks.Task<int> IsGameFullAsync(int code) {
            return base.Channel.IsGameFullAsync(code);
        }
        
        public int SearchGameByCode(int code) {
            return base.Channel.SearchGameByCode(code);
        }
        
        public System.Threading.Tasks.Task<int> SearchGameByCodeAsync(int code) {
            return base.Channel.SearchGameByCodeAsync(code);
        }
        
        public int IsGameOngoing(int code) {
            return base.Channel.IsGameOngoing(code);
        }
        
        public System.Threading.Tasks.Task<int> IsGameOngoingAsync(int code) {
            return base.Channel.IsGameOngoingAsync(code);
        }
    }
}
